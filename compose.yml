version: "3.8"

services:
  # Frontend service (React)
  frontend:
    # Build context for the React app
    build: ./client
    ports:
      # - "5173:5173"  # Expose React app on port 5173 for local development
      - "0.0.0.0:5173:5173" #for production like aws 
    env_file:
      - ./client/.env  # Load environment variables from the root .env file
    environment:
      VITE_API_URL: ${VITE_API_URL}  # Use the variable from the .env file
    depends_on:
      - backend  # Ensure the backend service starts first
    networks:
      - app-network
    restart: always  # Auto-restart...used in production

    #for local developement  
    # develop:
    #   # we specify the files to watch for changes
    #   watch:
    #     # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
    #     - path: ./client/package.json
    #       action: rebuild
    #     - path: ./client/package-lock.json
    #       action: rebuild
    #     # it'll watch for changes in the frontend directory and sync the changes with the container real time
    #     - path: ./client
    #       target: /app
    #       action: sync

  # Backend service (Django)
  backend:
    build: ./backend
    ports:
      # - "8001:8001"  # Expose Django app on port 8001...for local development
      - "0.0.0.0:8001:8001" #used in production
    env_file:
      - ./backend/.env  # Load environment variables from backend/.env
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    volumes:
      - ./backend:/app  # Mount backend code for live changes
    networks:
      - app-network
    restart: always #used in production

networks:
  app-network:
    driver: bridge

# Optionally define named volumes for persistent data if needed (for SQLite)
# volumes:
#   anime:  # This is useful if you need persistent data across restarts (optional)
